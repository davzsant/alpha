// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id String @id @default(cuid())
  name String?
  email String @unique
  emailVerified DateTime?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts Account[]
  sessions Session[]
  tasks Task[]
  events Event[]
  images Image[]
  exercises Exercise[]
  bodyParts BodyPart[]
}

model Day{
  dayNumber Int @id
  events Event[]
  tasks Task[]
  lastTraining BodyPart[]
}

model Task{
  taskId Int @id @default(autoincrement())
  startTime String? 
  finishTime String?
  dayRepeat String?
  title String
  isFinished Boolean
  type String
  body String?
  userId String
  dayId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  day Day @relation(fields: [dayId], references: [dayNumber], onDelete: Cascade)
}

model BodyPart{
  bodyPartId Int @id @default(autoincrement())
  bodyName String @unique
  trainingDay String?
  motivation String?
  exercises Exercise[]
  userId String
  lastDayId Int?
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  lastDayTrained Day? @relation(fields: [lastDayId],references: [dayNumber],onDelete: Cascade)
}

model Exercise{
  exerciseId Int @id @default(autoincrement())
  exerciseName String @unique
  description String?
  set Int
  repetitions Int
  weight Int?
  lastSet Int?
  lastRepetitions Int?
  lastWeight Int?
  trainingId Int?
  bodyPartId Int
  userId String
  bodyPart BodyPart @relation(fields: [bodyPartId],references: [bodyPartId],onDelete: Cascade)
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)

}

model Event{
  eventId Int @id @default(autoincrement())
  title String
  description String?
  dayId Int 
  userId String
  imageId Int[]
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  day Day @relation(fields: [dayId],references: [dayNumber],onDelete: Cascade)
}

model Image{
  imageId Int @id @default(autoincrement())
  imageName String?
  imageLink String
  userId String
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}



